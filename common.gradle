// Gradle settings and tasks common to all JmePower subprojects

apply plugin: 'checkstyle'
apply plugin: 'java'

ext {
    group = 'com.github.stephengold'
    jmeTarget = '' // distinguish non-JME libraries built for specific JME releases
    websiteUrl = 'https://github.com/stephengold/JmePower'

    // module coordinates of external dependencies:
    heartCoordinates = 'com.github.stephengold:Heart:8.3.2' + jmeTarget

    // current versions of libraries:
    jme3Version = '3.6.0-stable'
    jmePowerVersion = '1.1.1-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_8

checkstyle {
    toolVersion '9.3'
}

tasks.withType(JavaCompile) { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
        // Suppress warnings that source value 7 is obsolete.
        options.compilerArgs << '-Xlint:-options'
    }
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

tasks.withType(JavaExec) { // Java runtime options:
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
    //jvmArgs '-verbose:gc'
    //jvmArgs '-Xms1024m', '-Xmx1024m'
}

configurations.all {
   resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // to disable caching of SNAPSHOTs
}
repositories {
    //mavenLocal() // to find local SNAPSHOTs of libraries
    mavenCentral()
    //maven { url 'https://s01.oss.sonatype.org/content/groups/staging' } // to find libraries staged but not yet released
}

// custom tasks for creating source/javadoc JARs:

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    dependsOn 'javadoc'
    description 'Creates a JAR of javadoc.'
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    description 'Creates a JAR of sourcecode.'
    from sourceSets.main.allJava
}
